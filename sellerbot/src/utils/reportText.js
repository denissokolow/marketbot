// src/utils/reportText.js
const oz = require('../services/ozon');
const {
  getOzonReportFiltered,
  getReturnsCountFiltered,
  getReturnsSumFiltered,
  getDeliveryBuyoutStats,
  // getBuyoutAndProfit ‚Äî –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è today
} = require('../services/ozon');

// ===== —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è =====
function esc(s = '') {
  return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
}
function formatMoney(n) {
  const v = Number(n) || 0;
  return Math.round(v).toLocaleString('ru-RU');
}
function formatInt(n) {
  return Math.round(Number(n) || 0).toLocaleString('ru-RU');
}

// YYYY-MM-DD –ø–æ Europe/Moscow
function getTodayISO() {
  const now = new Date();
  const parts = new Intl.DateTimeFormat('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric', month: '2-digit', day: '2-digit',
  }).formatToParts(now);
  const m = Object.fromEntries(parts.map(p => [p.type, p.value]));
  return `${m.year}-${m.month}-${m.day}`;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –≤—ã–∑–æ–≤ –∫ Ozon Seller API (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ)
async function ozRequest({ client_id, api_key, endpoint, body }) {
  try {
    if (typeof oz.ozonApiRequest === 'function') {
      return await oz.ozonApiRequest({ client_id, api_key, endpoint, body });
    }
    if (oz.api && typeof oz.api.request === 'function') {
      return await oz.api.request({ client_id, api_key, endpoint, body });
    }
    if (typeof oz.request === 'function') {
      return await oz.request({ client_id, api_key, endpoint, body });
    }
    throw new Error('Ozon API request function not found');
  } catch (e) {
    if (process.env.DEBUG_TODAY === '1') {
      console.error('[finance-totals] request error:', e?.response?.data || e);
    }
    return null;
  }
}

// /v3/finance/transaction/totals ‚Üí –æ—Ç–¥–∞—ë—Ç –∞–≥—Ä–µ–≥–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
async function getFinanceTotals({ client_id, api_key, date_from, date_to }) {
  const body = {
    date: { from: date_from, to: date_to },
    posting_number: '',
    transaction_type: 'all',
  };
  const resp = await ozRequest({
    client_id, api_key,
    endpoint: '/v3/finance/transaction/totals',
    body,
  });
  return resp?.result || null;
}

// –°—É–º–º–∞ ¬´—Ä–∞—Å—Ö–æ–¥–æ–≤¬ª –∏–∑ –æ—Ç–≤–µ—Ç–∞ totals (–±–µ—Ä—ë–º –º–æ–¥—É–ª—å –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π)
function sumExpensesFromTotals(totals) {
  if (!totals || typeof totals !== 'object') return 0;
  const fields = [
    'sale_commission',
    'processing_and_delivery',
    'refunds_and_cancellations',
    'services_amount',
    'compensation_amount',
    'money_transfer',
    'others_amount',
  ];
  let s = 0;
  for (const k of fields) {
    const v = Number(totals[k] || 0);
    if (!Number.isFinite(v)) continue;
    s += Math.abs(v); // –∏–º–µ–Ω–Ω–æ "–≤—ã—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã", –ø–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –º–æ–¥—É–ª—å
  }
  return Math.round(s * 100) / 100;
}

// ===== –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á—ë—Ç –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ) =====
async function makeReportText(user, date, opts = {}) {
  const from = `${date}T00:00:00.000Z`;
  const to   = `${date}T23:59:59.999Z`;
  const trackedSkus = opts.trackedSkus || null;
  const db          = opts.db || null;
  const chatId      = opts.chatId || null;

  // 1) –ó–∞–∫–∞–∑—ã (–≤—ã—Ä—É—á–∫–∞ + —à—Ç)
  const analytics = await getOzonReportFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    metrics: ['revenue', 'ordered_units'],
    trackedSkus,
  });
  let revenueOrdered = 0, orderedUnits = 0;
  if (Array.isArray(analytics)) {
    revenueOrdered = Number(analytics[0] || 0);
    orderedUnits   = Number(analytics[1] || 0);
  } else if (analytics && typeof analytics === 'object') {
    revenueOrdered = Number(analytics.revenue || 0);
    orderedUnits   = Number(analytics.ordered_units || 0);
  }

  // 2) –í–æ–∑–≤—Ä–∞—Ç—ã (—à—Ç., ‚ÇΩ)
  const returnsCount = Number(await getReturnsCountFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    trackedSkus,
  })) || 0;

  const returnsSum = Number(await getReturnsSumFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    trackedSkus,
  })) || 0;

  // 3) –í—ã–∫—É–ø (—à—Ç.) ‚Äî –∏–∑ –ø–æ—Å—Ç–∏–Ω–≥–æ–≤ delivered
  const stats = await getDeliveryBuyoutStats({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date_from: from,
    date_to:   to,
    trackedSkus,
    db,
    chatId,
  }) || { totalCount: 0 };

  const buyoutCount = Number(stats.totalCount || 0);

  // 4) –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —á–∞—Å—Ç—å: totals ‚Üí –≤—ã–∫—É–ø–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –∏ —Ä–∞—Å—Ö–æ–¥—ã
  const totals = await getFinanceTotals({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date_from: from,
    date_to:   to,
  });

  const accrualsForSale = Number(totals?.accruals_for_sale || 0); // ¬´–≤—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É¬ª (‚ÇΩ)
  const expenses        = sumExpensesFromTotals(totals);          // —Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (‚ÇΩ)

  // 5) –ü—Ä–∏–±—ã–ª—å –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ:
  //    profit = accruals_for_sale - expenses - returnsSum
  const profitFinal = Math.round((accrualsForSale - expenses - returnsSum) * 100) / 100;

  if (process.env.DEBUG_TODAY === '1') {
    console.log('[today-finance-totals]', {
      date, from, to,
      analytics_raw: analytics,
      returnsCount, returnsSum,
      buyoutCount,
      totals_raw: totals,
      accrualsForSale,
      expenses,
      profitFinal,
    });
  }

  const lines = [];
  lines.push(`üè™ –ú–∞–≥–∞–∑–∏–Ω: ${user.shop_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
  lines.push(' - - - - ');
  lines.push(`üìÜ –û–±—â–∏–π –æ—Ç—á—ë—Ç –∑–∞: ${date}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –ó–∞–∫–∞–∑—ã: ${formatInt(orderedUnits)} —à—Ç. –Ω–∞ ${formatMoney(revenueOrdered)}‚ÇΩ`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –í—ã–∫—É–ø–ª–µ–Ω–æ: ${formatInt(buyoutCount)} —à—Ç. –Ω–∞ ${formatMoney(accrualsForSale)}‚ÇΩ`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –í–æ–∑–≤—Ä–∞—Ç—ã: ${formatInt(returnsCount)} —à—Ç. –Ω–∞ ${formatMoney(returnsSum)}‚ÇΩ`);
  lines.push(' - - - - ');
  lines.push(`üí∞ –ü—Ä–∏–±—ã–ª—å: ${formatMoney(profitFinal)}‚ÇΩ`);
  lines.push(' - - - - ');

  return lines.map(line => `<code>${esc(line)}</code>`).join('\n');
}

async function makeTodayReportText(user, opts = {}) {
  const date = getTodayISO();
  return makeReportText(user, date, { ...(opts || {}) });
}

module.exports = { makeTodayReportText, makeReportText };
