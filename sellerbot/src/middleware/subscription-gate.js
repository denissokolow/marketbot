// src/middleware/subscription-gate.js
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π ¬´—à–ª—é–∑ –ø–æ–¥–ø–∏—Å–∫–∏¬ª –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫—Ä–æ–º–µ /settings –∏ –µ—ë –ø–æ–¥–º–µ–Ω—é.

function isActiveByRow(row, now = new Date()) {
  const until = row?.subscription_until ? new Date(row.subscription_until) : null;
  if (until && until.getTime() >= now.getTime()) return true;
  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–ª–∞–≥ is_subscribed, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if (process.env.USE_IS_SUBSCRIBED_FALLBACK === '1' && row?.is_subscribed === true) return true;
  return false;
}

async function getUserSubRow(pool, chatId) {
  const r = await pool.query(
    `SELECT subscription_until, is_subscribed FROM users WHERE chat_id = $1 LIMIT 1`,
    [chatId]
  );
  return r.rowCount ? r.rows[0] : null;
}

/**
 * @param {{ pool:any, logger?:any, expiredText?:string, whitelistCommands?:string[], allowCallbackPrefixes?:string[] }} opts
 */
module.exports = function subscriptionGate(opts) {
  const {
    pool,
    logger,
    expiredText = '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –µ—ë –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ –º–µ–Ω—é (–≤–Ω–∏–∑—É —Å–ª–µ–≤–∞) üëá –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.',
    // –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    whitelistCommands = ['/settings'],
    // –∫–∞–∫–∏–µ callbackQuery —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (–ø–æ–¥–º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏ –∏—Ö —ç–∫—à–µ–Ω—ã)
    allowCallbackPrefixes = ['settings:', 'settings_', 'subs:', 'billing:', 'pay:', 'payment:'],
  } = opts || {};

  // –Ω–µ–±–æ–ª—å—à–∏–µ —Ö–µ–ª–ø–µ—Ä—ã
  const isWhitelistedCmd = (cmd) =>
    !!whitelistCommands.find((w) => cmd === w || cmd.startsWith(w + ' '));

  const isAllowedCallback = (data) =>
    !!allowCallbackPrefixes.find((p) => data.startsWith(p));

  return async (ctx, next) => {
    const chatId = ctx.from?.id;
    if (!chatId) return next(); // —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã

    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ ¬´–Ω–µ-–∫–æ–º–∞–Ω–¥–Ω—ã–µ¬ª –∞–ø–¥–µ–π—Ç—ã, –∫—Ä–æ–º–µ callbackQuery ‚Äî –∏—Ö –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
    const text = ctx.message?.text?.trim();
    const isCommand = !!(text && text.startsWith('/'));

    // 1) –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º /settings –∏ –µ—ë –ø–æ–¥–º–µ–Ω—é
    if (isCommand) {
      const cmd = text.split(/\s+/, 1)[0]; // '/report', '/settings'
      if (isWhitelistedCmd(cmd)) return next();
    }
    if (ctx.callbackQuery?.data) {
      const data = String(ctx.callbackQuery.data);
      if (isAllowedCallback(data)) return next();
    }

    // 2) –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if (isCommand || ctx.callbackQuery) {
      // –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–æ–±—â–µ?
      const userRow = await getUserSubRow(pool, chatId);
      if (!userRow) {
        // –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (–æ–±—ã—á–Ω–æ /start ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        return next();
      }

      const active = isActiveByRow(userRow);
      if (!active) {
        // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–∞—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        try {
          await ctx.reply(expiredText);
        } catch (e) {
          logger?.warn?.(e, '[subGate] reply error');
        }
        return; // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º next() ‚Üí –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–π–¥—ë—Ç –¥–æ —Å–≤–æ–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
      }
    }

    // 3) –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã/–Ω–µ –∫–æ–ª–±—ç–∫–∏) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return next();
  };
};
