require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const cron = require('node-cron');
const db = require('./db');
const { getTodayReport, getYesterdayReport } = require('./ozon');

function getYesterdayISO() {
  const d = new Date();
  d.setDate(d.getDate() - 1);
  return d.toISOString().slice(0, 10);
}

function getMainMenu() {
  return Markup.keyboard([
    ['üîÑ –ü—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–π—á–∞—Å', '‚ùì –ü–æ–º–æ—â—å'],
    ['üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏']
  ]).resize();
}

const bot = new Telegraf(process.env.BOT_TOKEN);
const registrationStep = {};

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
bot.start(async ctx => {
  registrationStep[ctx.from.id] = {};
  await ctx.reply('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à client_id –∏ api_key —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:');
});

// --- –ü—Ä–∏—ë–º client_id –∏ seller_api ---
bot.hears(/^(\d+) (.+)$/i, async ctx => {
  const chat_id = ctx.from.id;
  registrationStep[chat_id] = {
    client_id: ctx.match[1],
    seller_api: ctx.match[2],
    first_name: ctx.from.first_name || '',
    last_name: ctx.from.last_name || ''
  };
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (–∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ Ozon):');
});

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ---
bot.hears('üîÑ –ü—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–π—á–∞—Å', async ctx => {
  const chat_id = ctx.from.id;
  const user = (await db.query('SELECT * FROM users WHERE chat_id=$1', [chat_id])).rows[0];
  if (!user) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start');

  const today = new Date().toISOString().slice(0, 10);
  const report = await getTodayReport({ 
    client_id: user.client_id, 
    api_key: user.seller_api, 
    date: today, 
    shop_name: user.shop_name 
  });
  ctx.reply(report, { parse_mode: 'Markdown', reply_markup: getMainMenu().reply_markup });
});

// --- –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ ---
bot.hears('üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', async ctx => {
  const chat_id = ctx.from.id;
  await db.query('UPDATE users SET is_subscribed=true WHERE chat_id=$1', [chat_id]);
  ctx.reply('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!', getMainMenu());
});
bot.hears('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', async ctx => {
  const chat_id = ctx.from.id;
  await db.query('UPDATE users SET is_subscribed=false WHERE chat_id=$1', [chat_id]);
  ctx.reply('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.', getMainMenu());
});
bot.hears('‚ùì –ü–æ–º–æ—â—å', ctx => {
  ctx.reply('–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', getMainMenu());
});

// --- –ü—Ä–∏—ë–º shop_name (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) ---
bot.on('text', async ctx => {
  const chat_id = ctx.from.id;

  if (
    registrationStep[chat_id] &&
    registrationStep[chat_id].client_id &&
    !ctx.message.text.startsWith('/')
    && !['üîÑ –ü—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–π—á–∞—Å', '‚ùì –ü–æ–º–æ—â—å', 'üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏'].includes(ctx.message.text)
  ) {
    const {client_id, seller_api, first_name, last_name} = registrationStep[chat_id];
    const shop_name = ctx.message.text.trim();

    await db.query(
      `INSERT INTO users (chat_id, client_id, seller_api, is_subscribed, first_name, last_name, shop_name)
      VALUES ($1, $2, $3, true, $4, $5, $6)
      ON CONFLICT (chat_id) DO UPDATE SET client_id = $2, seller_api = $3, first_name = $4, last_name = $5, shop_name = $6`,
      [chat_id, client_id, seller_api, first_name, last_name, shop_name]
    );
    delete registrationStep[chat_id];
    await ctx.reply(
      `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–í–∞—à –º–∞–≥–∞–∑–∏–Ω: *${shop_name}*`,
      { parse_mode: 'Markdown', reply_markup: getMainMenu().reply_markup }
    );
    return;
  }
});

// --- –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á—ë—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞ ---
cron.schedule('0 10 * * *', async () => {
  const users = (await db.query('SELECT * FROM users WHERE is_subscribed = true')).rows;
  const date = getYesterdayISO();

  for (let user of users) {
    try {
      const report = await getYesterdayReport({ 
        client_id: user.client_id, 
        api_key: user.seller_api, 
        date, 
        shop_name: user.shop_name 
      });
      await bot.telegram.sendMessage(user.chat_id, report, { parse_mode: 'Markdown' });
    } catch (e) {
      console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${user.chat_id}:`, e.message);
    }
  }
});

bot.launch().then(() => console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"));
db.connect();
