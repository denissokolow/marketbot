// commands/register.js
const registrationStep = {};

module.exports = (bot, db) => {
  bot.start(async ctx => {
    registrationStep[ctx.from.id] = {};
    await ctx.reply('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à client_id –∏ api_key —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:');
  });

  bot.hears(/^(\d+) (.+)$/i, async ctx => {
    const chat_id = ctx.from.id;
    registrationStep[chat_id] = {
      client_id: ctx.match[1],
      seller_api: ctx.match[2],
      first_name: ctx.from.first_name || '',
      last_name: ctx.from.last_name || ''
    };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (–∫–∞–∫ –Ω–∞ Ozon):');
  });

  bot.on('text', async ctx => {
    const chat_id = ctx.from.id;
    if (
      registrationStep[chat_id] &&
      registrationStep[chat_id].client_id &&
      !ctx.message.text.startsWith('/')
      && !['üîÑ –ü—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–π—á–∞—Å', '‚ùì –ü–æ–º–æ—â—å', 'üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏'].includes(ctx.message.text)
    ) {
      const {client_id, seller_api, first_name, last_name} = registrationStep[chat_id];
      const shop_name = ctx.message.text.trim();
      await db.query(
        `INSERT INTO users (chat_id, client_id, seller_api, is_subscribed, first_name, last_name, shop_name)
         VALUES ($1, $2, $3, true, $4, $5, $6)
         ON CONFLICT (chat_id) DO UPDATE SET client_id = $2, seller_api = $3, first_name = $4, last_name = $5, shop_name = $6`,
        [chat_id, client_id, seller_api, first_name, last_name, shop_name]
      );
      delete registrationStep[chat_id];
      await ctx.reply(
        `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–í–∞—à –º–∞–≥–∞–∑–∏–Ω: *${shop_name}*`,
        { parse_mode: 'Markdown' }
      );
      return;
    }
  });
};
