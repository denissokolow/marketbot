// commands/settings.js
// –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –∑–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å–Ω—ã–π settings –∏–∑ ./settings/index.js,
// —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏/–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (¬´–¢–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è¬ª, ¬´–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤¬ª –∏ —Ç.–ø.).
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /profile –∏ callback settings:profile
// (–Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –≤–∞—à–∏–º index.js –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ –Ω–µ–≥–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π).

const { mainMenu } = require('../menu/menu.js');

const esc = (s = '') =>
  String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

const replyCode = (ctx, text, extra = {}) =>
  ctx.reply(`<code>${esc(String(text))}</code>`, { parse_mode: 'HTML', ...extra });

const editCode = (ctx, text, extra = {}) =>
  ctx.editMessageText(`<code>${esc(String(text))}</code>`, { parse_mode: 'HTML', ...extra });

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã dd.mm.yyyy
function fmtDDMMYYYY(d) {
  try {
    const dt = new Date(d);
    if (Number.isNaN(dt.getTime())) return null;
    const dd = String(dt.getDate()).padStart(2, '0');
    const mm = String(dt.getMonth() + 1).padStart(2, '0');
    const yy = String(dt.getFullYear());
    return `${dd}.${mm}.${yy}`;
  } catch { return null; }
}

// –¢–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
function profileText({ firstName, lastName, shopName, isSubscribed, untilText }) {
  const nameLine = `–ò–º—è: ${firstName || ''}${lastName ? ' ' + lastName : ''}`.trim();
  const shopLine = `–ú–∞–≥–∞–∑–∏–Ω: ${shopName || '‚Äî'}`;
  let subLine;
  if (isSubscribed === false) subLine = '–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞';
  else subLine = `–ü–æ–¥–ø–∏—Å–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${untilText || '00.00.2025'}`;
  return `üë§ –ü—Ä–æ—Ñ–∏–ª—å
${nameLine}
${shopLine}
${subLine}`;
}

module.exports = (bot, db) => {
  // 1) –ü–æ–¥–∫–ª—é—á–∞–µ–º –í–ê–®–ï –º–æ–¥—É–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –æ–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç /settings –∏ –≤—Å–µ–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
  require('./settings/index.js')(bot, db);

  // 2) –î–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ—Ñ–∏–ª—å" –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ callback,
  // —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–≤–µ—Å–∏—Ç—å –Ω–∞ –Ω–µ—ë –∫–Ω–æ–ø–∫—É –≤ —Å–≤–æ—ë–º ./settings/index.js (callback_data: 'settings:profile'),
  // –Ω–µ –ª–æ–º–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.

  // /profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  bot.command('profile', async (ctx) => {
    try {
      const chat_id = ctx.from.id;
      const uRes = await db.query('SELECT * FROM users WHERE chat_id = $1 LIMIT 1', [chat_id]);
      const u = uRes.rows[0] || {};
      const firstName = (u.first_name || ctx.from.first_name || '').trim();
      const lastName  = (u.last_name  || ctx.from.last_name  || '').trim();

      const sRes = await db.query(
        'SELECT name FROM shops WHERE chat_id = $1 ORDER BY created_at DESC, id DESC LIMIT 1',
        [chat_id]
      );
      const shopName = (sRes.rows[0]?.name || u.shop_name || '').trim();

      const isSubscribed = typeof u.is_subscribed === 'boolean' ? u.is_subscribed : true;
      let untilText = null;
      if (u.subscription_until) untilText = fmtDDMMYYYY(u.subscription_until);

      await replyCode(ctx, profileText({ firstName, lastName, shopName, isSubscribed, untilText }));
    } catch (e) {
      console.error('[settings/profile] /profile error:', e);
      await replyCode(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainMenu());
    }
  });

  // callback: settings:profile ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ index.js
  bot.action('settings:profile', async (ctx) => {
    try {
      await ctx.answerCbQuery();
      const chat_id = ctx.from.id;
      const uRes = await db.query('SELECT * FROM users WHERE chat_id = $1 LIMIT 1', [chat_id]);
      const u = uRes.rows[0] || {};
      const firstName = (u.first_name || ctx.from.first_name || '').trim();
      const lastName  = (u.last_name  || ctx.from.last_name  || '').trim();

      const sRes = await db.query(
        'SELECT name FROM shops WHERE chat_id = $1 ORDER BY created_at DESC, id DESC LIMIT 1',
        [chat_id]
      );
      const shopName = (sRes.rows[0]?.name || u.shop_name || '').trim();

      const isSubscribed = typeof u.is_subscribed === 'boolean' ? u.is_subscribed : true;
      let untilText = null;
      if (u.subscription_until) untilText = fmtDDMMYYYY(u.subscription_until);

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—é; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
      try {
        await editCode(ctx, profileText({ firstName, lastName, shopName, isSubscribed, untilText }));
      } catch {
        await replyCode(ctx, profileText({ firstName, lastName, shopName, isSubscribed, untilText }));
      }
    } catch (e) {
      console.error('[settings/profile] callback error:', e);
      try { await ctx.answerCbQuery(); } catch {}
      await replyCode(ctx, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
};
