// commands/settings.js
const { Markup } = require('telegraf');

// ---- callback keys (–¥–æ 64 –±–∞–π—Ç)
const CB = {
  MAIN:        'set_main',
  PROFILE:     'set_prof',

  SHOPS:       'set_shops',
  SHOP_OPEN:   'set_shop',      // set_shop:<shopId>

  PRODS:       'set_prods',     // set_prods:<shopId>:<page>
  TOGGLE:      'set_tgl',       // set_tgl:<shopId>:<sku>:<page>

  ADD_SHOP:    'set_add_shop',
  DEL_SHOP:    'set_del_shop',

  PRODUCTS_TAB:'set_tab_prods', // –∑–∞–≥–ª—É—à–∫–∞

  // –Ω–æ–≤–æ–µ: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
  COSTS:       'set_costs',     // set_costs[:<page>]
  COST_SET:    'cst_set',       // cst_set|<shopId>|<sku>|<page>
};

const PAGE_SIZE = 10;

// ---- –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
// key = chat_id -> { shop_id, sku, page }
const costInputState = Object.create(null);

// ---- helpers
const asInt = (v, d = 0) => {
  const n = Number.parseInt(v, 10);
  return Number.isFinite(n) ? n : d;
};

function parseData(data) {
  const [cmd, a, b, c] = String(data).split(/[:|]/); // –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ ":" –∏ "|"
  return { cmd, a, b, c };
}

async function sendOrEdit(ctx, text, keyboard) {
  try {
    if (ctx.updateType === 'callback_query') {
      await ctx.editMessageText(text, { reply_markup: keyboard?.reply_markup, parse_mode: undefined });
    } else {
      await ctx.reply(text, keyboard);
    }
  } catch {
    await ctx.reply(text, keyboard);
  }
}

// ---- SQL helpers
async function getUserByChat(db, chatId) {
  const r = await db.query('SELECT * FROM users WHERE chat_id = $1 LIMIT 1', [chatId]);
  return r?.rows?.[0] || null;
}

async function getShopsByChat(db, chatId) {
  const r = await db.query(
    'SELECT * FROM shops WHERE chat_id = $1 ORDER BY created_at DESC, id DESC',
    [chatId]
  );
  return r?.rows || [];
}

async function getShopById(db, shopId) {
  const r = await db.query('SELECT * FROM shops WHERE id = $1 LIMIT 1', [shopId]);
  return r?.rows?.[0] || null;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
 * –ï—Å–ª–∏ —è–≤–Ω—ã—Ö tracked –∑–∞–ø–∏—Å–µ–π –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ—Ç ‚Äî tracked = quantity>0.
 */
async function getShopProductsPage(db, shopId, page = 1, pageSize = PAGE_SIZE) {
  const offset = (page - 1) * pageSize;

  const hc = await db.query(
    'SELECT COUNT(*)::int AS cnt FROM tracked_products WHERE shop_id = $1',
    [shopId]
  );
  const hasCustom = (hc.rows?.[0]?.cnt || 0) > 0;

  const totalRes = await db.query(
    'SELECT COUNT(*)::int AS c FROM shop_products WHERE shop_id = $1',
    [shopId]
  );
  const total = totalRes.rows?.[0]?.c || 0;

  const r = await db.query(
    `
      SELECT p.sku, p.title, p.quantity,
             COALESCE(tp.is_active, false) AS user_tracked
      FROM shop_products p
      LEFT JOIN tracked_products tp
        ON tp.shop_id = p.shop_id AND tp.sku = p.sku
      WHERE p.shop_id = $1
      ORDER BY p.title NULLS LAST, p.sku
      LIMIT $2 OFFSET $3
    `,
    [shopId, pageSize, offset]
  );

  const items = (r.rows || []).map(it => {
    const effective =
      hasCustom ? Boolean(it.user_tracked) : (Number(it.quantity) || 0) > 0;
    return {
      sku: it.sku,
      title: it.title || `SKU ${it.sku}`,
      quantity: Number(it.quantity) || 0,
      tracked: effective,
    };
  });

  return { items, total, hasCustom };
}

// –≤–∫–ª/–≤—ã–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (idempotent)
async function toggleTracked(db, shopId, sku) {
  await db.query(
    `
      INSERT INTO tracked_products (shop_id, sku, is_active, created_at, net)
      VALUES ($1, $2, true, NOW(), COALESCE(
        (SELECT net FROM tracked_products WHERE shop_id=$1 AND sku=$2 LIMIT 1), 0
      ))
      ON CONFLICT (shop_id, sku)
      DO UPDATE SET is_active = NOT tracked_products.is_active
    `,
    [shopId, sku]
  );
}

/** –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π */
async function getActiveTrackedPage(db, chatId, page = 1, pageSize = PAGE_SIZE) {
  const offset = (page - 1) * pageSize;

  const cnt = await db.query(
    `
      SELECT COUNT(*)::int AS c
      FROM tracked_products tp
      JOIN shops s ON s.id = tp.shop_id
      WHERE s.chat_id = $1 AND tp.is_active = TRUE
    `,
    [chatId]
  );
  const total = cnt.rows?.[0]?.c || 0;

  const r = await db.query(
    `
      SELECT
        tp.shop_id,
        tp.sku,
        COALESCE(sp.title,'') AS title,
        COALESCE(tp.net,0)    AS net,
        s.name                AS shop_name
      FROM tracked_products tp
      JOIN shops s
        ON s.id = tp.shop_id
       AND s.chat_id = $1
      LEFT JOIN shop_products sp
        ON sp.shop_id = tp.shop_id
       AND sp.sku     = tp.sku
      WHERE tp.is_active = TRUE
      ORDER BY s.name, tp.sku
      LIMIT $2 OFFSET $3
    `,
    [chatId, pageSize, offset]
  );

  return { items: r.rows || [], total };
}

// ---- UI builders
function mainKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', CB.PROFILE)],
    [Markup.button.callback('üè¨ –ú–∞–≥–∞–∑–∏–Ω—ã', CB.SHOPS)],
    // –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–≥–ª—É—à–∫—É ¬´–¢–æ–≤–∞—Ä—ã¬ª, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø—Ä–µ–∂–Ω–∏–µ —ç–∫—Ä–∞–Ω—ã
    [Markup.button.callback('üì¶ –¢–æ–≤–∞—Ä—ã', CB.PRODUCTS_TAB)],
    // –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç
    [Markup.button.callback('üí≥ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', `${CB.COSTS}:1`)],
  ]);
}

function backRow(cb = CB.MAIN) {
  return [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', cb)];
}

function shopsKeyboard(shops) {
  const rows = shops.map(s =>
    [Markup.button.callback(`üè™ ${s.name || `–ú–∞–≥–∞–∑–∏–Ω #${s.id}`}`, `${CB.SHOP_OPEN}:${s.id}`)]
  );
  rows.push([
    Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP),
    Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.DEL_SHOP),
  ]);
  rows.push(...[backRow(CB.MAIN)]);
  return Markup.inlineKeyboard(rows);
}

function shopSubmenuKeyboard(shopId) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üì¶ –¢–æ–≤–∞—Ä—ã (–≤—ã–±—Ä–∞—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)', `${CB.PRODS}:${shopId}:1`)],
    backRow(CB.SHOPS),
  ]);
}

function productsKeyboard(shopId, page, totalPages, items) {
  const rows = [];

  for (const it of items) {
    const title = (it.title || `SKU ${it.sku}`);
    const labelTitle = title.length > 32 ? title.slice(0, 31) + '‚Ä¶' : title;
    const label = `${it.tracked ? '‚úÖ' : '‚ùå'} ${labelTitle} (${it.sku})`;
    rows.push([
      Markup.button.callback(label, `${CB.TOGGLE}:${shopId}:${it.sku}:${page}`)
    ]);
  }

  const navRow = [];
  if (page > 1) navRow.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.PRODS}:${shopId}:${page - 1}`));
  navRow.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
  if (page < totalPages) navRow.push(Markup.button.callback('‚û°Ô∏è', `${CB.PRODS}:${shopId}:${page + 1}`));
  if (navRow.length) rows.push(navRow);

  rows.push(backRow(`${CB.SHOP_OPEN}:${shopId}`));
  return Markup.inlineKeyboard(rows);
}

function costsKeyboard(items, page, totalPages) {
  const rows = [];
  for (const row of items) {
    const labelTitle = row.title ? `${row.sku} ‚Äî ${row.title}` : String(row.sku);
    const netInfo = row.net ? ` (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${row.net})` : '';
    const label = (labelTitle + netInfo).slice(0, 60);
    rows.push([
      Markup.button.callback(label, `${CB.COST_SET}|${row.shop_id}|${row.sku}|${page}`)
    ]);
  }

  // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
  const navRow = [];
  if (page > 1) navRow.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.COSTS}:${page - 1}`));
  navRow.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
  if (page < totalPages) navRow.push(Markup.button.callback('‚û°Ô∏è', `${CB.COSTS}:${page + 1}`));
  if (navRow.length) rows.push(navRow);

  rows.push(backRow(CB.MAIN));
  return Markup.inlineKeyboard(rows);
}

function cancelCostKeyboard(page) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', `${CB.COSTS}:${Math.max(1, page || 1)}`)],
  ]);
}

// ---- –ö–æ–º–∞–Ω–¥–∞ /settings –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
module.exports = (bot, db) => {
  // /settings
  bot.command('settings', async (ctx) => {
    // –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    delete costInputState[ctx.from.id];
    await sendOrEdit(ctx, '‚öôÔ∏è –ú–µ–Ω—é', mainKeyboard());
  });

  // –ì–ª–∞–≤–Ω–∞—è
  bot.action(CB.MAIN, async (ctx) => {
    delete costInputState[ctx.from.id];
    await ctx.answerCbQuery();
    await sendOrEdit(ctx, '‚öôÔ∏è –ú–µ–Ω—é', mainKeyboard());
  });

  // –ü—Ä–æ—Ñ–∏–ª—å
  bot.action(CB.PROFILE, async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUserByChat(db, ctx.from.id);
    const name = [user?.first_name, user?.last_name].filter(Boolean).join(' ') || '‚Äî';
    const sub = user?.is_subscribed ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞';
    const text =
      'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n' +
      `–ò–º—è: ${name}\n` +
      `–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ${sub}`;
    await sendOrEdit(ctx, text, Markup.inlineKeyboard([backRow(CB.MAIN)]));
  });

  // –ó–∞–≥–ª—É—à–∫–∞ "–¢–æ–≤–∞—Ä—ã"
  bot.action(CB.PRODUCTS_TAB, async (ctx) => {
    await ctx.answerCbQuery();
    await sendOrEdit(
      ctx,
      'üì¶ –†–∞–∑–¥–µ–ª "–¢–æ–≤–∞—Ä—ã":\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–∞–≥–∞–∑–∏–Ω—ã¬ª –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.',
      Markup.inlineKeyboard([backRow(CB.MAIN)])
    );
  });

  // –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  bot.action(CB.SHOPS, async (ctx) => {
    await ctx.answerCbQuery();
    const shops = await getShopsByChat(db, ctx.from.id);
    if (!shops.length) {
      await sendOrEdit(
        ctx,
        'üè¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP)],
          backRow(CB.MAIN),
        ])
      );
      return;
    }
    await sendOrEdit(ctx, '–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:', shopsKeyboard(shops));
  });

  // –ü–æ–¥–º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
  bot.action(new RegExp(`^${CB.SHOP_OPEN}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const shop = await getShopById(db, shopId);
    if (!shop) {
      await sendOrEdit(ctx, '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.', Markup.inlineKeyboard([backRow(CB.SHOPS)]));
      return;
    }
    const name = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${name}`, shopSubmenuKeyboard(shop.id));
  });

  // –õ–∏—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ)
  bot.action(new RegExp(`^${CB.PRODS}:(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const page = Math.max(1, asInt(pageStr, 1));

    const { items, total } = await getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));

    const shop = await getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;

    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ SKU
  bot.action(new RegExp(`^${CB.TOGGLE}:(\\d+):(\\d+):(\\d+)$`), async (ctx) => {
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const sku = asInt(skuStr);
    const page = Math.max(1, asInt(pageStr, 1));

    await toggleTracked(db, shopId, sku);
    await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');

    const { items, total } = await getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    const shop = await getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;
    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // –ó–∞–≥–ª—É—à–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
  bot.action(CB.ADD_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    await sendOrEdit(
      ctx,
      '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã —Ç–µ–º —Å–ø–æ—Å–æ–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.',
      Markup.inlineKeyboard([backRow(CB.SHOPS)])
    );
  });

  bot.action(CB.DEL_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    await sendOrEdit(
      ctx,
      '–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
      Markup.inlineKeyboard([backRow(CB.SHOPS)])
    );
  });

  // ---- –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"
  bot.action(new RegExp(`^${CB.COSTS}(?::(\\d+))?$`), async (ctx) => {
    await ctx.answerCbQuery();
    delete costInputState[ctx.from.id];

    const page = Math.max(1, asInt(ctx.match?.[1] || 1, 1));
    const { items, total } = await getActiveTrackedPage(db, ctx.from.id, page, PAGE_SIZE);
    if (!total) {
      return sendOrEdit(
        ctx,
        '–ê–∫—Ç–∏–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.',
        Markup.inlineKeyboard([backRow(CB.MAIN)])
      );
    }
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    const head = 'üí≥ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤\n' +
                 '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–ª–æ–µ 1..1 000 000).';
    await sendOrEdit(ctx, head, costsKeyboard(items, page, totalPages));
  });

  // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  bot.action(new RegExp(`^${CB.COST_SET}\\|(\\d+)\\|(\\d+)\\|(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shop_id = asInt(shopIdStr);
    const sku = asInt(skuStr);
    const page = Math.max(1, asInt(pageStr, 1));

    if (!shop_id || !sku) {
      return sendOrEdit(ctx, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞.', Markup.inlineKeyboard([backRow(`${CB.COSTS}:${page}`)]));
    }

    costInputState[ctx.from.id] = { shop_id, sku, page };

    const r = await db.query(
      `SELECT COALESCE(sp.title,'') AS title
         FROM shop_products sp
        WHERE sp.shop_id = $1 AND sp.sku = $2
        LIMIT 1`,
      [shop_id, sku]
    );
    const title = r.rows[0]?.title || '';

    const prompt =
      `–í–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:\n` +
      `SKU: ${sku}${title ? `\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${title}` : ''}\n\n` +
      `–¢–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1 000 000.`;
    await sendOrEdit(ctx, prompt, cancelCostKeyboard(page));
  });

  // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
  bot.on('text', async (ctx, next) => {
    const st = costInputState[ctx.from.id];
    if (!st) return next(); // –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º

    const raw = (ctx.message.text || '').trim();
    const val = Number(raw);
    const isInt = Number.isInteger(val);
    if (!isInt || val < 1 || val > 1_000_000) {
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1 000 000).', cancelCostKeyboard(st.page));
    }

    try {
      await db.query(
        `UPDATE tracked_products
            SET net = $1
          WHERE shop_id = $2 AND sku = $3 AND is_active = TRUE`,
        [val, st.shop_id, st.sku]
      );
      delete costInputState[ctx.from.id];
      await ctx.reply(`–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è SKU ${st.sku} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${val}`, Markup.inlineKeyboard([
        [Markup.button.callback('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', `${CB.COSTS}:${st.page}`)],
        backRow(CB.MAIN),
      ]));
    } catch (e) {
      console.error('net update error:', e);
      delete costInputState[ctx.from.id];
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.inlineKeyboard([backRow(CB.MAIN)]));
    }
  });

  // –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ ¬´—Å—Ç—Ä. X/Y¬ª
  bot.action('noop', async (ctx) => ctx.answerCbQuery());
};

