const { Markup } = require('telegraf');

module.exports = ({ bot, db, shared, data }) => {
  const {
    CB, PAGE_SIZE, asInt, parseData, sendOrEdit, backRow,
    addShopInputState, costInputState
  } = shared;

  // helpers –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const firstWord = (s) => {
    const t = String(s || '').trim();
    return t ? t.split(/\s+/)[0] : '';
  };
  const fmtRUB0 = (n) => `${Math.round(Number(n) || 0).toLocaleString('ru-RU')}‚ÇΩ`;

  // ----- –ø–æ–¥–º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ -----
  function shopSubmenuKeyboard(shopId) {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è', `${CB.PRODS}:${shopId}:1`)],
      [Markup.button.callback('üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', `${CB.COSTS}:${shopId}:1`)],
      [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', `${CB.DEL_CONF}:${shopId}`)],
      backRow(CB.MAIN),
    ]);
  }

  function productsKeyboard(shopId, page, totalPages, items) {
    const rows = [];
    for (const it of items) {
      const name = firstWord(it.title) || `SKU ${it.sku}`;
      const label = `${it.tracked ? '‚úÖ' : '‚ùå'} ${name} (${it.sku})`;
      rows.push([Markup.button.callback(label, `${CB.TOGGLE}:${shopId}:${it.sku}:${page}`)]);
    }
    const nav = [];
    if (page > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.PRODS}:${shopId}:${page - 1}`));
    nav.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
    if (page < totalPages) nav.push(Markup.button.callback('‚û°Ô∏è', `${CB.PRODS}:${shopId}:${page + 1}`));
    if (nav.length) rows.push(nav);
    rows.push(backRow(`${CB.SHOP_OPEN}:${shopId}`));
    return Markup.inlineKeyboard(rows);
  }

  function costsKeyboard(shopId, page, totalPages, items) {
    const rows = items.map(it => {
      const name = firstWord(it.title) || `SKU ${it.sku}`;
      const price = fmtRUB0(it.net);
      const label = `${name} (${it.sku}): ${price}`;
      return [Markup.button.callback(label, `${CB.COSTS_SET}:${shopId}:${it.sku}:${page}`)];
    });
    const nav = [];
    if (page > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.COSTS}:${shopId}:${page - 1}`));
    nav.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
    if (page < totalPages) nav.push(Markup.button.callback('‚û°Ô∏è', `${CB.COSTS}:${shopId}:${page + 1}`));
    if (nav.length) rows.push(nav);
    rows.push(backRow(`${CB.SHOP_OPEN}:${shopId}`));
    return Markup.inlineKeyboard(rows);
  }

  // ---------- –æ—Ç–∫—Ä—ã—Ç—å –ø—É–Ω–∫—Ç ¬´–ú–∞–≥–∞–∑–∏–Ω¬ª (–µ–¥. —á–∏—Å–ª–æ) ----------
  async function openSingleShopMenu(ctx) {
    const chatId = ctx.from.id;
    const shops = await data.getShopsByChat(db, chatId);

    if (!shops.length) {
      await sendOrEdit(
        ctx,
        'üè¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP)],
          backRow(CB.MAIN),
        ])
      );
      return;
    }

    const shop = shops[0]; // —Ä–∞–∑—Ä–µ—à—ë–Ω –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω
    const title = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${title}`, shopSubmenuKeyboard(shop.id));
  }

  // –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
  const SHOP_TRIGGERS = [CB.SHOPS, CB.SHOP].filter(
    t => typeof t === 'string' && t.length > 0
  );
  if (SHOP_TRIGGERS.length) {
    bot.action(SHOP_TRIGGERS, async (ctx) => {
      await ctx.answerCbQuery();
      return openSingleShopMenu(ctx);
    });
  }

  // ---------- –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ ----------
  bot.action(new RegExp(`^${CB.SHOP_OPEN}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const shop = await data.getShopById(db, shopId);
    if (!shop) {
      await sendOrEdit(ctx, '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.', Markup.inlineKeyboard([backRow(CB.MAIN)]));
      return;
    }
    const name = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${name}`, shopSubmenuKeyboard(shop.id));
  });

  // ---------- —Ç–æ–≤–∞—Ä—ã ----------
  bot.action(new RegExp(`^${CB.PRODS}:(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const page = Math.max(1, asInt(pageStr, 1));

    try {
      await data.refreshShopProductsFromOzon(db, shopId);
    } catch (e) {
      console.error('[settings/shops] refreshShopProductsFromOzon error:', e?.response?.data || e);
    }

    const { items, total } = await data.getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));

    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;

    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  bot.action(new RegExp(`^${CB.TOGGLE}:(\\d+):(\\d+):(\\d+)$`), async (ctx) => {
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const sku = asInt(skuStr);
    const page = Math.max(1, asInt(pageStr, 1));

    await data.toggleTracked(db, shopId, sku);
    await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');

    const { items, total } = await data.getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;
    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // ---------- —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ----------
  bot.action(new RegExp(`^${CB.COSTS}:(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const page = Math.max(1, asInt(pageStr, 1));

    const { items, total } = await data.getActiveTrackedPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));

    if (!items.length) {
      return sendOrEdit(
        ctx,
        '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n–û—Ç–∫—Ä–æ–π—Ç–µ ¬´üì¶ –¢–æ–≤–∞—Ä—ã‚Ä¶¬ª –∏ –≤–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.',
        Markup.inlineKeyboard([backRow(`${CB.SHOP_OPEN}:${shopId}`)])
      );
    }

    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    await sendOrEdit(ctx, `üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî ${title}`, costsKeyboard(shopId, page, totalPages, items));
  });

  bot.action(new RegExp(`^${CB.COSTS_SET}:(\\d+):(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const sku = asInt(skuStr);
    const page = Math.max(1, asInt(pageStr, 1));

    costInputState.set(ctx.from.id, { shopId, sku, page });
    await sendOrEdit(
      ctx,
      `–í–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è SKU ${sku} (—á–∏—Å–ª–æ, –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π).`,
      Markup.inlineKeyboard([backRow(`${CB.COSTS}:${shopId}:${page}`)])
    );
  });

  // ======================================================
  // ================ –î–û–ë–ê–í–ò–¢–¨ –ú–ê–ì–ê–ó–ò–ù ====================
  // ======================================================
  bot.action(CB.ADD_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    costInputState.delete(ctx.from.id);

    const shops = await data.getShopsByChat(db, ctx.from.id);
    if (shops.length > 0) {
      // —É–∂–µ –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–¥–º–µ–Ω—é
      const shop = shops[0];
      const title = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
      await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${title}`, shopSubmenuKeyboard(shop.id));
      return;
    }

    addShopInputState.set(ctx.from.id, { step: 1 });
    await sendOrEdit(
      ctx,
      '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:',
      Markup.inlineKeyboard([backRow(CB.MAIN)])
    );
  });

  bot.action(CB.ADD_CANCEL, async (ctx) => {
    await ctx.answerCbQuery();
    addShopInputState.delete(ctx.from.id);
    await sendOrEdit(ctx, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', Markup.inlineKeyboard([backRow(CB.MAIN)]));
  });

  // ---------- –≤–≤–æ–¥—ã (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞) ----------
  bot.on('text', async (ctx, next) => {
    // –≤–≤–æ–¥ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const costSt = costInputState.get(ctx.from.id);
    if (costSt) {
      const raw = (ctx.message?.text || '').trim();
      if (!raw) return;

      if (raw === '/cancel' || /^–æ—Ç–º–µ–Ω–∞$/i.test(raw)) {
        costInputState.delete(ctx.from.id);
        await ctx.reply('–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏.');
        return;
      }

      const normalized = raw.replace(',', '.');
      const net = Number(normalized);
      if (!Number.isFinite(net) || net < 0) {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123.45).');
        return;
      }

      await data.setNetForTracked(db, costSt.shopId, costSt.sku, net);
      costInputState.delete(ctx.from.id);

      const page = costSt.page || 1;
      const { items, total } = await data.getActiveTrackedPage(db, costSt.shopId, page, PAGE_SIZE);
      const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
      const shop = await data.getShopById(db, costSt.shopId);
      const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${costSt.shopId}`;
      await ctx.reply(`üíæ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
      await sendOrEdit(ctx, `üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî ${title}`, costsKeyboard(costSt.shopId, page, totalPages, items));
      return;
    }

    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    const st = addShopInputState.get(ctx.from.id);
    if (!st) return next();

    const text = (ctx.message?.text || '').trim();
    if (!text) return;

    try {
      if (st.step === 1) {
        st.shop_name = text;
        st.step = 2;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ client_id:');
        return;
      }

      if (st.step === 2) {
        const exists = await db.query(
          `SELECT 1 FROM shops WHERE client_id=$1
           UNION ALL
           SELECT 1 FROM users WHERE client_id=$1
           LIMIT 1`,
          [text]
        );
        if (exists.rowCount) {
          await ctx.reply('‚ùå –¢–∞–∫–æ–π client_id —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π client_id:');
          return;
        }
        st.client_id = text;
        st.step = 3;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ api_key:');
        return;
      }

      if (st.step === 3) {
        if (!text) { await ctx.reply('api_key –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ api_key:'); return; }

        const shopId = await data.addShopWithSync(db, {
          chat_id: ctx.from.id,
          shop_name: st.shop_name,
          client_id: st.client_id,
          api_key: text,
        });

        addShopInputState.delete(ctx.from.id);

        const shop = await data.getShopById(db, shopId);
        const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
        await ctx.reply(`‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´${st.shop_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω (ID: ${shopId}).`);
        await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${title}`, shopSubmenuKeyboard(shopId));
        return;
      }
    } catch (e) {
      addShopInputState.delete(ctx.from.id);
      await ctx.reply(
        e?.code === 'only_one_shop_per_chat'
          ? '‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω.'
          : e?.code === 'client_id_exists'
            ? '‚ùå –¢–∞–∫–æ–π client_id —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.'
            : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.'
      );
    }
  });

  // ======================================================
  // ================ –£–î–ê–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê ===================
  // ======================================================
  bot.action(new RegExp(`^${CB.DEL_CONF}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const shop = await data.getShopById(db, shopId);
    if (!shop || shop.chat_id !== ctx.from.id) {
      await sendOrEdit(ctx, '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.', Markup.inlineKeyboard([backRow(CB.MAIN)]));
      return;
    }
    const name = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(
      ctx,
      `–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω ¬´${name}¬ª?\n–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ–≥–æ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –£–¥–∞–ª–∏—Ç—å', `${CB.DEL_DO}:${shop.id}`)],
        backRow(`${CB.SHOP_OPEN}:${shop.id}`),
      ])
    );
  });

  bot.action(new RegExp(`^${CB.DEL_DO}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);

    try {
      await data.deleteShopDeep(db, ctx.from.id, shopId);
      await sendOrEdit(ctx, 'üóë –ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª—ë–Ω.', Markup.inlineKeyboard([backRow(CB.MAIN)]));
    } catch (e) {
      await sendOrEdit(
        ctx,
        e?.message === 'shop_not_found' ? '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.',
        Markup.inlineKeyboard([backRow(CB.MAIN)])
      );
    }
  });
};
