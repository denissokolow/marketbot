const { Markup } = require('telegraf');

module.exports = ({ bot, db, shared, data }) => {
  const {
    CB, PAGE_SIZE, asInt, parseData, sendOrEdit, backRow,
    addShopInputState, costInputState
  } = shared;

  function shopsKeyboard(shops) {
    const rows = shops.map(s =>
      [Markup.button.callback(`üè™ ${s.name || `–ú–∞–≥–∞–∑–∏–Ω #${s.id}`}`, `${CB.SHOP_OPEN}:${s.id}`)]
    );
    rows.push([
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP),
      Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.DEL_SHOP),
    ]);
    rows.push(backRow(CB.MAIN));
    return Markup.inlineKeyboard(rows);
  }

  function shopSubmenuKeyboard(shopId) {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üì¶ –¢–æ–≤–∞—Ä—ã (–≤—ã–±—Ä–∞—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)', `${CB.PRODS}:${shopId}:1`)],
      [Markup.button.callback('üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', `${CB.COSTS}:${shopId}:1`)],
      backRow(CB.SHOPS),
    ]);
  }

  function productsKeyboard(shopId, page, totalPages, items) {
    const rows = [];
    for (const it of items) {
      const title = it.title || `SKU ${it.sku}`;
      const short = title.length > 32 ? (title.slice(0, 31) + '‚Ä¶') : title;
      const label = `${it.tracked ? '‚úÖ' : '‚ùå'} ${short} (${it.sku})`;
      rows.push([Markup.button.callback(label, `${CB.TOGGLE}:${shopId}:${it.sku}:${page}`)]);
    }
    const nav = [];
    if (page > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.PRODS}:${shopId}:${page - 1}`));
    nav.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
    if (page < totalPages) nav.push(Markup.button.callback('‚û°Ô∏è', `${CB.PRODS}:${shopId}:${page + 1}`));
    if (nav.length) rows.push(nav);
    rows.push(backRow(`${CB.SHOP_OPEN}:${shopId}`));
    return Markup.inlineKeyboard(rows);
  }

  // ---------- —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ ----------
  bot.action(CB.SHOPS, async (ctx) => {
    await ctx.answerCbQuery();
    addShopInputState.delete(ctx.from.id);
    costInputState.delete(ctx.from.id);

    const shops = await data.getShopsByChat(db, ctx.from.id);
    if (!shops.length) {
      await sendOrEdit(
        ctx,
        'üè¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP)],
          backRow(CB.MAIN),
        ])
      );
      return;
    }
    await sendOrEdit(ctx, '–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:', shopsKeyboard(shops));
  });

  // ---------- –ø–æ–¥–º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ ----------
  bot.action(new RegExp(`^${CB.SHOP_OPEN}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const shop = await data.getShopById(db, shopId);
    if (!shop) {
      await sendOrEdit(ctx, '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.', Markup.inlineKeyboard([backRow(CB.SHOPS)]));
      return;
    }
    const name = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${name}`, shopSubmenuKeyboard(shop.id));
  });

  // ---------- —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ ----------
  bot.action(new RegExp(`^${CB.PRODS}:(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const page = Math.max(1, asInt(pageStr, 1));

    const { items, total } = await data.getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));

    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;

    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  bot.action(new RegExp(`^${CB.TOGGLE}:(\\d+):(\\d+):(\\d+)$`), async (ctx) => {
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const sku = asInt(skuStr);
    const page = Math.max(1, asInt(pageStr, 1));

    await data.toggleTracked(db, shopId, sku);
    await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');

    const { items, total } = await data.getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;
    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // ======================================================
  // ================ –î–û–ë–ê–í–ò–¢–¨ –ú–ê–ì–ê–ó–ò–ù ====================
  // ======================================================
  bot.action(CB.ADD_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    costInputState.delete(ctx.from.id);
    addShopInputState.set(ctx.from.id, { step: 1 });
    await sendOrEdit(
      ctx,
      '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:',
      Markup.inlineKeyboard([backRow(CB.SHOPS)])
    );
  });

  bot.action(CB.ADD_CANCEL, async (ctx) => {
    await ctx.answerCbQuery();
    addShopInputState.delete(ctx.from.id);
    await sendOrEdit(ctx, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', Markup.inlineKeyboard([backRow(CB.SHOPS)]));
  });

  // —à–∞–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–µ–∫—Å—Ç–æ–º)
  bot.on('text', async (ctx, next) => {
    const st = addShopInputState.get(ctx.from.id);
    if (!st) return next();

    const text = (ctx.message?.text || '').trim();
    if (!text) return;

    try {
      if (st.step === 1) {
        st.shop_name = text;
        st.step = 2;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ client_id:');
        return;
      }

      if (st.step === 2) {
        const exists = await db.query(
          `SELECT 1 FROM shops WHERE client_id=$1
           UNION ALL
           SELECT 1 FROM users WHERE client_id=$1
           LIMIT 1`,
          [text]
        );
        if (exists.rowCount) {
          await ctx.reply('‚ùå –¢–∞–∫–æ–π client_id —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π client_id:');
          return;
        }
        st.client_id = text;
        st.step = 3;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ api_key:');
        return;
      }

      if (st.step === 3) {
        if (!text) { await ctx.reply('api_key –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ api_key:'); return; }

        const shopId = await data.addShopWithSync(db, {
          chat_id: ctx.from.id,
          shop_name: st.shop_name,
          client_id: st.client_id,
          api_key: text,
        });

        addShopInputState.delete(ctx.from.id);
        await ctx.reply(`‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´${st.shop_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω (ID: ${shopId}).`);

        const shops = await data.getShopsByChat(db, ctx.from.id);
        await ctx.reply('–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:', shopsKeyboard(shops));
        return;
      }
    } catch (e) {
      addShopInputState.delete(ctx.from.id);
      await ctx.reply(e?.code === 'client_id_exists'
        ? '‚ùå –¢–∞–∫–æ–π client_id —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.'
        : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.');
    }
  });

  // ======================================================
  // ================ –£–î–ê–õ–ò–¢–¨ –ú–ê–ì–ê–ó–ò–ù =====================
  // ======================================================
  bot.action(CB.DEL_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    const shops = await data.getShopsByChat(db, ctx.from.id);
    if (!shops.length) {
      await sendOrEdit(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.', Markup.inlineKeyboard([backRow(CB.SHOPS)]));
      return;
    }
    const rows = shops.map(s => [
      Markup.button.callback(`üóë ${s.name || `–ú–∞–≥–∞–∑–∏–Ω #${s.id}`} (${s.client_id})`, `${CB.DEL_CONF}:${s.id}`)
    ]);
    rows.push(backRow(CB.SHOPS));
    await sendOrEdit(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(rows));
  });

  bot.action(new RegExp(`^${CB.DEL_CONF}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const shop = await data.getShopById(db, shopId);
    if (!shop || shop.chat_id !== ctx.from.id) {
      await sendOrEdit(ctx, '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.', Markup.inlineKeyboard([backRow(CB.DEL_SHOP)]));
      return;
    }
    const name = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(
      ctx,
      `–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω ¬´${name}¬ª?\n–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ–≥–æ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –£–¥–∞–ª–∏—Ç—å', `${CB.DEL_DO}:${shop.id}`)],
        backRow(CB.DEL_SHOP),
      ])
    );
  });

  bot.action(new RegExp(`^${CB.DEL_DO}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);

    try {
      await data.deleteShopDeep(db, ctx.from.id, shopId);
      await sendOrEdit(ctx, 'üóë –ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª—ë–Ω.', Markup.inlineKeyboard([backRow(CB.SHOPS)]));
    } catch (e) {
      await sendOrEdit(
        ctx,
        e?.message === 'shop_not_found' ? '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.' : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.',
        Markup.inlineKeyboard([backRow(CB.SHOPS)])
      );
    }
  });
};
