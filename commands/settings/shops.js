const { Markup } = require('telegraf');

module.exports = ({ bot, db, shared, data }) => {
  const { CB, PAGE_SIZE, asInt, parseData, sendOrEdit, backRow } = shared;

  function shopsKeyboard(shops) {
    const rows = shops.map(s =>
      [Markup.button.callback(`üè™ ${s.name || `–ú–∞–≥–∞–∑–∏–Ω #${s.id}`}`, `${CB.SHOP_OPEN}:${s.id}`)]
    );
    rows.push([
      Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP),
      Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.DEL_SHOP),
    ]);
    rows.push(backRow(CB.MAIN));
    return Markup.inlineKeyboard(rows);
  }

function shopSubmenuKeyboard(shopId) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üì¶ –¢–æ–≤–∞—Ä—ã (–≤—ã–±—Ä–∞—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)', `${CB.PRODS}:${shopId}:1`)],
    [Markup.button.callback('üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤', `set_costs:${shopId}:1`)],
    backRow(CB.SHOPS),
  ]);
}

  function productsKeyboard(shopId, page, totalPages, items) {
    const rows = [];
    for (const it of items) {
      const title = it.title || `SKU ${it.sku}`;
      const short = title.length > 32 ? (title.slice(0, 31) + '‚Ä¶') : title;
      const label = `${it.tracked ? '‚úÖ' : '‚ùå'} ${short} (${it.sku})`;
      rows.push([Markup.button.callback(label, `${CB.TOGGLE}:${shopId}:${it.sku}:${page}`)]);
    }
    const nav = [];
    if (page > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.PRODS}:${shopId}:${page - 1}`));
    nav.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
    if (page < totalPages) nav.push(Markup.button.callback('‚û°Ô∏è', `${CB.PRODS}:${shopId}:${page + 1}`));
    if (nav.length) rows.push(nav);
    rows.push(backRow(`${CB.SHOP_OPEN}:${shopId}`));
    return Markup.inlineKeyboard(rows);
  }

  // –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
  bot.action(CB.SHOPS, async (ctx) => {
    await ctx.answerCbQuery();
    const shops = await data.getShopsByChat(db, ctx.from.id);
    if (!shops.length) {
      await sendOrEdit(
        ctx,
        'üè¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', CB.ADD_SHOP)],
          backRow(CB.MAIN),
        ])
      );
      return;
    }
    await sendOrEdit(ctx, '–í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:', shopsKeyboard(shops));
  });

  // –ü–æ–¥–º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
  bot.action(new RegExp(`^${CB.SHOP_OPEN}:(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const shop = await data.getShopById(db, shopId);
    if (!shop) {
      await sendOrEdit(ctx, '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.', Markup.inlineKeyboard([backRow(CB.SHOPS)]));
      return;
    }
    const name = shop.name || `–ú–∞–≥–∞–∑–∏–Ω #${shop.id}`;
    await sendOrEdit(ctx, `–ú–∞–≥–∞–∑–∏–Ω: ${name}`, shopSubmenuKeyboard(shop.id));
  });

  // –õ–∏—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
  bot.action(new RegExp(`^${CB.PRODS}:(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const page = Math.max(1, asInt(pageStr, 1));

    const { items, total } = await data.getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));

    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;

    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
  bot.action(new RegExp(`^${CB.TOGGLE}:(\\d+):(\\d+):(\\d+)$`), async (ctx) => {
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const sku = asInt(skuStr);
    const page = Math.max(1, asInt(pageStr, 1));

    await data.toggleTracked(db, shopId, sku);
    await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');

    const { items, total } = await data.getShopProductsPage(db, shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    const shop = await data.getShopById(db, shopId);
    const title = shop?.name || `–ú–∞–≥–∞–∑–∏–Ω #${shopId}`;
    const text = `üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: ${title}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:`;
    await sendOrEdit(ctx, text, productsKeyboard(shopId, page, totalPages, items));
  });

  // –ó–∞–≥–ª—É—à–∫–∏ add/del
  bot.action(CB.ADD_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    await sendOrEdit(
      ctx,
      '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ–º —Å–ø–æ—Å–æ–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.',
      Markup.inlineKeyboard([backRow(CB.SHOPS)])
    );
  });

  bot.action(CB.DEL_SHOP, async (ctx) => {
    await ctx.answerCbQuery();
    await sendOrEdit(
      ctx,
      '–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.',
      Markup.inlineKeyboard([backRow(CB.SHOPS)])
    );
  });
};
