const { Markup } = require('telegraf');

module.exports = ({ bot, db, shared, data }) => {
  const { CB, PAGE_SIZE, asInt, parseData, sendOrEdit, backRow, costInputState } = shared;

  function costsKeyboard(shopId, page, totalPages, items) {
    const rows = [];
    for (const it of items) {
      const title = `${it.sku} ‚Äî ${it.title}`;
      const short = title.length > 48 ? (title.slice(0, 47) + '‚Ä¶') : title;
      const right = it.net ? ` (net: ${it.net}‚ÇΩ)` : ' (net: 0‚ÇΩ)';
      rows.push([
        Markup.button.callback(
          short + right,
          `${CB.COST_SET}:${shopId}:${it.sku}:${page}`
        ),
      ]);
    }
    const nav = [];
    if (page > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è', `${CB.COSTS}:${shopId}:${page - 1}`));
    nav.push(Markup.button.callback(`—Å—Ç—Ä. ${page}/${totalPages}`, 'noop'));
    if (page < totalPages) nav.push(Markup.button.callback('‚û°Ô∏è', `${CB.COSTS}:${shopId}:${page + 1}`));
    if (nav.length) rows.push(nav);
    // –Ω–∞–∑–∞–¥ ‚Äî –≤ –ø–æ–¥–º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
    rows.push(backRow(`${CB.SHOP_OPEN}:${shopId}`));
    return Markup.inlineKeyboard(rows);
  }

  // –°–ü–ò–°–û–ö tracked-–ø–æ–∑–∏—Ü–∏–π –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –º–∞–≥–∞–∑–∏–Ω–∞
  bot.action(new RegExp(`^${CB.COSTS}:(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    costInputState.delete(ctx.from.id);

    const { a: shopIdStr, b: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const page   = Math.max(1, asInt(pageStr, 1));

    const { items, total } = await data.getActiveTrackedPage(db, ctx.from.id, shopId, page, PAGE_SIZE);

    if (!total) {
      await sendOrEdit(
        ctx,
        '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n' +
          '–û—Ç–∫—Ä–æ–π—Ç–µ ¬´üì¶ –¢–æ–≤–∞—Ä—ã‚Ä¶¬ª –∏ –≤–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.',
        Markup.inlineKeyboard([backRow(`${CB.SHOP_OPEN}:${shopId}`)])
      );
      return;
    }

    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    await sendOrEdit(
      ctx,
      'üíµ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞):',
      costsKeyboard(shopId, page, totalPages, items)
    );
  });

  // –í–´–ë–û–† –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ net
  bot.action(new RegExp(`^${CB.COST_SET}:(\\d+):(\\d+):(\\d+)$`), async (ctx) => {
    await ctx.answerCbQuery();
    const { a: shopIdStr, b: skuStr, c: pageStr } = parseData(ctx.match.input);
    const shopId = asInt(shopIdStr);
    const sku    = asInt(skuStr);
    const page   = Math.max(1, asInt(pageStr, 1));

    costInputState.set(ctx.from.id, { shopId, sku, backData: { page } });

    await sendOrEdit(
      ctx,
      `–í–≤–µ–¥–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è SKU ${sku} (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1‚Ä¶1 000 000):`,
      Markup.inlineKeyboard([backRow(`${CB.COSTS}:${shopId}:${page}`)])
    );
  });

  // –¢–ï–ö–°–¢–û–í–´–ô –≤–≤–æ–¥ net
  bot.on('text', async (ctx, next) => {
    const state = costInputState.get(ctx.from.id);
    if (!state) return next();

    const raw = (ctx.message?.text || '').trim();
    const n = Number.parseInt(raw, 10);
    if (!Number.isFinite(n) || n < 1 || n > 1_000_000) {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1 000 000).');
      return;
    }

    try {
      await data.setNetForTracked(db, ctx.from.id, state.shopId, state.sku, n);
      await ctx.reply(`‚úîÔ∏è –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è SKU ${state.sku} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${n}‚ÇΩ`);
    } catch (e) {
      if (String(e.message) === 'shop_not_found') {
        await ctx.reply('–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      } else {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      }
    } finally {
      costInputState.delete(ctx.from.id);
    }

    // –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const page = state.backData?.page || 1;
    const { items, total } = await data.getActiveTrackedPage(db, ctx.from.id, state.shopId, page, PAGE_SIZE);
    const totalPages = Math.max(1, Math.ceil(total / PAGE_SIZE));
    await ctx.reply(
      'üíµ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞):',
      costsKeyboard(state.shopId, page, totalPages, items)
    );
  });
};
