// utils/reportText.js
const {
  getOzonReport,
  getReturnsCount,
  getReturnsSum,
  getDeliveryBuyoutStats,
  getBuyoutAndProfit,
  formatMoney,
} = require('../ozon');
const { getTodayISO, getYesterdayISO } = require('./utils');

// HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
function esc(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
function padRight(str, width = 8) {
  const v = String(str);
  const spaces = Math.max(0, width - v.length);
  return ' '.repeat(spaces) + v;
}

// –§–æ—Ä–º–∞—Ç —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
function format2(num) {
  if (num == null || !isFinite(num)) return '-';
  return Number(num).toLocaleString('ru-RU', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
}

async function makeReportText(user, date) {
  const from = `${date}T00:00:00.000Z`;
  const to   = `${date}T23:59:59.999Z`;

  // 1) –ó–∞–∫–∞–∑—ã
  const metrics = await getOzonReport({
    client_id: user.client_id,
    api_key: user.seller_api,
    date,
    metrics: ['revenue', 'ordered_units'],
  });

  // 2) –í–æ–∑–≤—Ä–∞—Ç—ã
  const returnsCount = await getReturnsCount({ client_id: user.client_id, api_key: user.seller_api, date });
  const returnsSum = await getReturnsSum({ client_id: user.client_id, api_key: user.seller_api, date });

  // 3) –í—ã–∫—É–ø—ã
  const stats = await getDeliveryBuyoutStats({
    client_id: user.client_id,
    api_key: user.seller_api,
    date_from: from,
    date_to: to,
  });

  // 4) –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É + –ø—Ä–∏–±—ã–ª—å
  const { buyoutAmount, profit, services_amount } = await getBuyoutAndProfit({
    client_id: user.client_id,
    api_key: user.seller_api,
    date_from: from,
    date_to: to,
    buyoutCost: stats.buyoutCost,
    buyoutAmount: stats.totalAmount // ‚Üê –∏–∑ getDeliveryBuyoutStats
  });

  // 5) –î–†–† = (—Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É / –∑–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É) * 100
  const revenueOrdered = Number(metrics?.[0] || 0);
  const adSpend = Math.abs(Number(services_amount || 0));
  const drrPercent = revenueOrdered > 0 ? (adSpend / revenueOrdered) * 100 : null;

  // –°–æ–±–∏—Ä–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  const lines = [];
  lines.push(`üè™ –ú–∞–≥–∞–∑–∏–Ω:  ${padRight(user.shop_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 0)}`);
  lines.push('');
  lines.push(`üìÜ –û—Ç—á—ë—Ç –∑–∞:  ${padRight(date, 0)}`);
  lines.push('');
  lines.push(`üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:  ${padRight(metrics?.[1] ?? '-', 2)}`);
  lines.push(`üí∏ –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(revenueOrdered)}‚ÇΩ`, 2)}`);
  lines.push('');
  lines.push(`üì¶ –í—ã–∫—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:  ${padRight(stats.totalCount, 2)}`);
  lines.push(`üí∏ –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(buyoutAmount)}‚ÇΩ`, 2)}`);
  lines.push(`üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∫—É–ø–æ–≤:  ${padRight(`${formatMoney(stats.buyoutCost)}‚ÇΩ`, 2)}`);
  lines.push(`üí∞ –ü—Ä–∏–±—ã–ª—å:  ${padRight(`${formatMoney(profit)}‚ÇΩ`, 2)}`);
  lines.push('');
  lines.push(`üì¶ –í–æ–∑–≤—Ä–∞—Ç—ã:  ${padRight(returnsCount, 2)}`);
  lines.push(`üí∏ –í–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(returnsSum)}‚ÇΩ`, 2)}`);
  lines.push('');
  lines.push(`üí∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É:  ${padRight(`${formatMoney(adSpend)}‚ÇΩ`, 2)}`);
  lines.push(`üí∏ –î.–†.–†:  ${padRight(drrPercent == null ? '-' : `${format2(drrPercent)}%`, 2)}`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –∫–∞–∫ <pre>...</pre>
  return `<pre>${esc(lines.join('\n'))}</pre>`;
}

async function makeTodayReportText(user) {
  const date = getTodayISO();
  return makeReportText(user, date);
}

async function makeYesterdayReportText(user) {
  const date = getYesterdayISO();
  return makeReportText(user, date);
}

module.exports = {
  makeTodayReportText,
  makeYesterdayReportText,
};
