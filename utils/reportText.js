// utils/reportText.js
const {
  getOzonReportFiltered,
  getReturnsCountFiltered,
  getReturnsSumFiltered,
  getDeliveryBuyoutStats,
  getBuyoutAndProfit,
  getSalesBreakdownBySku,
  formatMoney,
  getStocksSumBySkus,
  getOrderedBySkuMap
} = require('../ozon');
const { getCampaignDailyStatsTotals } = require('../services/performanceApi');
const { getTodayISO, getYesterdayISO } = require('./utils');

// HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
function esc(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é (–¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
function padRight(str, width = 8) {
  const v = String(str);
  const spaces = Math.max(0, width - v.length);
  return ' '.repeat(spaces) + v;
}

// –§–æ—Ä–º–∞—Ç —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
function format2(num) {
  if (num == null || !isFinite(num)) return '-';
  return Number(num).toLocaleString('ru-RU', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
}

// –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function firstWord(s = '') {
  return String(s).trim().split(/\s+/)[0] || '';
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –∑–∞ –¥–∞—Ç—É
 * –°–¢–ò–õ–¨: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ <code>...</code> (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –±–µ–∑ –ø–æ–¥–ª–æ–∂–∫–∏)
 */
async function makeReportText(user, date, opts = {}) {
  const from = `${date}T00:00:00.000Z`;
  const to   = `${date}T23:59:59.999Z`;

  const trackedSkus = opts.trackedSkus || null;
  const hideAds     = !!opts.hideAds;
  const db          = opts.db || null;
  const chatId      = opts.chatId || null;

  // 1) –ó–∞–∫–∞–∑—ã
  const metrics = await getOzonReportFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    metrics: ['revenue', 'ordered_units'],
    trackedSkus,
  });
  const revenueOrdered = Number(metrics?.[0] || 0);
  const orderedUnits   = Number(metrics?.[1] || 0);

  // 2) –í–æ–∑–≤—Ä–∞—Ç—ã
  const returnsCount = await getReturnsCountFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    trackedSkus,
  });
  const returnsSum = await getReturnsSumFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    trackedSkus,
  });

  // 3) –í—ã–∫—É–ø—ã + —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
  const stats = await getDeliveryBuyoutStats({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date_from: from,
    date_to:   to,
    trackedSkus,
    db,
    chatId,
  });

  // 4) –ü—Ä–∏–±—ã–ª—å
  const { buyoutAmount, profit /*, services_amount*/ } = await getBuyoutAndProfit({
    client_id:  user.client_id,
    api_key:    user.seller_api,
    date_from:  from,
    date_to:    to,
    buyoutCost: stats.buyoutCost,
    buyoutAmount: stats.totalAmount,
  });

  // --- —Ä–µ–∫–ª–∞–º–∞ Performance ---
  let adSpendPerf = null, ctrPerf = null, drrPerf = null;
  if (!hideAds) {
    try {
      let perfId = null, perfSecret = null;
      if (db && chatId) {
        const rr = await db.query(
          `SELECT performance_client_id, performance_secret
             FROM shops
            WHERE chat_id = $1
              AND performance_client_id IS NOT NULL
              AND performance_secret IS NOT NULL
            ORDER BY id
            LIMIT 1`,
          [chatId]
        );
        if (rr.rowCount) {
          perfId = rr.rows[0].performance_client_id;
          perfSecret = rr.rows[0].performance_secret;
        }
      }
      if (perfId && perfSecret && typeof getCampaignDailyStatsTotals === 'function') {
        const { views, clicks, spent } = await getCampaignDailyStatsTotals({
          client_id: perfId,
          client_secret: perfSecret,
          date,
        });
        adSpendPerf = spent;
        ctrPerf = views > 0 ? (clicks / views) * 100 : null;
        drrPerf = revenueOrdered > 0 ? (spent / revenueOrdered) * 100 : null;
      }
    } catch (e) {
      console.error('[makeReportText] Performance API error:', e?.response?.data || e.message);
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
  const lines = [];
  lines.push(`üè™ –ú–∞–≥–∞–∑–∏–Ω:  ${padRight(user.shop_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 0)}`);
  lines.push(' - - - - ');
  lines.push(`üìÜ –û—Ç—á—ë—Ç –∑–∞:  ${padRight(date, 0)}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:  ${padRight(orderedUnits, 2)} —à—Ç.`);
  lines.push(`üí∏ –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(revenueOrdered)}‚ÇΩ`, 2)}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –í—ã–∫—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:  ${padRight(stats.totalCount, 2)} —à—Ç.`);
  lines.push(`üí∏ –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(buyoutAmount)}‚ÇΩ`, 2)}`);
  lines.push(`üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∫—É–ø–æ–≤:  ${padRight(`${formatMoney(stats.buyoutCost)}‚ÇΩ`, 2)}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –í–æ–∑–≤—Ä–∞—Ç—ã:  ${padRight(returnsCount, 2)} —à—Ç.`);
  lines.push(`üí∏ –í–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(returnsSum)}‚ÇΩ`, 2)}`);
  lines.push(' - - - - ');

  if (!hideAds) {
    const adSpendLine = adSpendPerf == null ? '-' : `${formatMoney(adSpendPerf)}‚ÇΩ`;
    const drrLine     = drrPerf == null     ? '-' : `${format2(drrPerf)}%`;
    const ctrLine     = ctrPerf == null     ? '-' : `${format2(ctrPerf)}%`;
    lines.push(`üí∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É:  ${padRight(adSpendLine, 2)}`);
    lines.push(`üí∏ –î.–†.–†:  ${padRight(drrLine, 2)}`);
    lines.push(`üí∏ CTR:  ${padRight(ctrLine, 2)}`);
    lines.push(' - - - - ');
    lines.push(`üí∞ –ü—Ä–∏–±—ã–ª—å:  ${padRight(`${formatMoney(profit)}‚ÇΩ`, 2)}`);
    lines.push(' - - - - ');
  }

  // –í–û–ó–í–†–ê–©–ê–ï–ú –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –ë–ï–ó –ø–æ–¥–ª–æ–∂–∫–∏ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ <code>)
  return lines.map(line => `<code>${esc(line)}</code>`).join('\n');
}

/**
 * –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
 * –°–¢–ò–õ–¨: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ <code>...</code> (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –±–µ–∑ –ø–æ–¥–ª–æ–∂–∫–∏)
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: –ó–∞–∫–∞–∑–∞–Ω–æ, –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É (–∏–∑ /v1/analytics/data, dimension=sku),
 *             –í—ã–∫—É–ø–ª–µ–Ω–æ, –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É (–∏–∑ /v3/finance/transaction/list),
 *             –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ (–∏–∑ /v1/analytics/stocks).
 */
async function makeSkuBreakdownText(user, date, opts = {}) {
  const from = `${date}T00:00:00.000Z`;
  const to   = `${date}T23:59:59.999Z`;
  const trackedSkus = opts.trackedSkus || null;

  // 1) –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤—ã–∫—É–ø–∞–º (—Ç–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ)
  const rows = await getSalesBreakdownBySku({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date_from: from,
    date_to:   to,
    trackedSkus,
  });

  if (!rows.length) {
    return '<code>–î–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –Ω–µ—Ç.</code>';
  }

  // 2) –û—Å—Ç–∞—Ç–∫–∏ ‚Äî –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º –Ω–∞ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ SKU
  const uniqueSkus = Array.from(new Set(rows.map(r => Number(r.sku)).filter(Number.isFinite)));
  let stockMap = new Map();
  try {
    stockMap = await getStocksSumBySkus({
      client_id: user.client_id,
      api_key:   user.seller_api,
      skus: uniqueSkus,
    });
  } catch (e) {
    console.error('[makeSkuBreakdownText] stocks error:', e?.response?.data || e.message);
  }

  // 3) –ó–∞–∫–∞–∑–∞–Ω–æ/–ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É ‚Äî –ø–æ –≤—á–µ—Ä–∞—à–Ω–µ–π –¥–∞—Ç–µ –∏ –ø–æ SKU
  let orderedMap = new Map();
  try {
    orderedMap = await getOrderedBySkuMap({
      client_id: user.client_id,
      api_key:   user.seller_api,
      date,            // YYYY-MM-DD (–≤—á–µ—Ä–∞)
      trackedSkus,     // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏
    });
  } catch (e) {
    console.error('[makeSkuBreakdownText] ordered map error:', e?.response?.data || e.message);
  }

  const out = [];
  rows.forEach((r, idx) => {
    const skuNum = Number(r.sku);
    const stock  = stockMap.get(skuNum) ?? 0;

    const ord    = orderedMap.get(skuNum) || { ordered: 0, revenue: 0 };
    const ordQty = Number(ord.ordered) || 0;
    const ordSum = Number(ord.revenue) || 0;
    out.push('<code> - - - - </code>');
    out.push(`<code>üîπ ${esc(firstWord(r.name))} (${r.sku})</code>`);
    
    out.push(`<code>üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ: ${ordQty.toLocaleString('ru-RU')} —à—Ç.</code>`);
    out.push(`<code>üí∏ –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É: ${formatMoney(ordSum)}‚ÇΩ</code>`);
    out.push(`<code>üì¶ –í—ã–∫—É–ø–ª–µ–Ω–æ: ${Number(r.count).toLocaleString('ru-RU')} —à—Ç.</code>`);
    out.push(`<code>üí∏ –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É: ${formatMoney(r.amount)}‚ÇΩ</code>`);
    out.push(`<code>üì¶ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${Number(stock).toLocaleString('ru-RU')} —à—Ç.</code>`);
  });

  return out.join('\n'); // –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å parse_mode: 'HTML'
}

// –°–µ—Ä–≤–∏—Å–Ω—ã–µ ¬´—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞¬ª
async function makeTodayReportText(user, opts = {}) {
  const date = getTodayISO();
  return makeReportText(user, date, { ...(opts || {}), hideAds: true });
}
async function makeYesterdayReportText(user, opts = {}) {
  const date = getYesterdayISO();
  return makeReportText(user, date, { ...(opts || {}), hideAds: false });
}
async function makeYesterdaySkuBreakdownText(user, opts = {}) {
  const date = getYesterdayISO();
  return makeSkuBreakdownText(user, date, opts);
}

module.exports = {
  makeTodayReportText,
  makeYesterdayReportText,
  makeSkuBreakdownText,
  makeYesterdaySkuBreakdownText,
};
