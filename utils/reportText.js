// utils/reportText.js
const {
  getOzonReportFiltered,
  getReturnsCountFiltered,
  getReturnsSumFiltered,
  getDeliveryBuyoutStats,
  getBuyoutAndProfit,
  getSalesBreakdownBySku,
  formatMoney,
  getStocksSumBySkus,
  getOrderedBySkuMap
} = require('../ozon');
const { getCampaignDailyStatsTotals } = require('../services/performanceApi');
const { getTodayISO, getYesterdayISO } = require('./utils');
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

async function getOrderedBySkuMapSafe({ client_id, api_key, date, trackedSkus }) {
  // –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–µ—Ç—Ä–∞–∏ –ø—Ä–∏ rate-limit (code:8 / HTTP 429 / 5xx)
  const MAX_RETRIES = 5;
  for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
    try {
      return await getOrderedBySkuMap({ client_id, api_key, date, trackedSkus });
    } catch (e) {
      const http = e?.response?.status;
      const code = e?.response?.data?.code;
      const msg  = String(e?.response?.data?.message || e?.message || '').toLowerCase();
      const isRate = http === 429 || code === 8 || msg.includes('rate limit');
      const is5xx  = http >= 500 && http < 600;
      if (!isRate && !is5xx) throw e; // –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º –Ω–µ—Ñ–ª—ç—Ç–∫–∏–µ –æ—à–∏–±–∫–∏
      if (attempt >= MAX_RETRIES) throw e;
      // —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—ç–∫–æ—Ñ—Ñ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
      const base = 300 * Math.pow(2, attempt); // 300,600,1200,2400,4800
      const jitter = Math.floor(Math.random() * 200);
      const ms = Math.min(5000, base + jitter);
      // –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:
      // console.warn('[getOrderedBySkuMapSafe] retry in', ms, 'ms', e?.response?.data || e?.message);
      await sleep(ms);
    }
  }
  return new Map(); // —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ
}

// –º–∞–ª–µ–Ω—å–∫–∏–π —á–∞–Ω–∫—ë—Ä –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è /v1/analytics/stocks
async function getStocksSumBySkusChunked({ client_id, api_key, skus, chunk = 900 }) {
  if (!Array.isArray(skus) || !skus.length) return new Map();
  const out = new Map();
  for (let i = 0; i < skus.length; i += chunk) {
    const part = skus.slice(i, i + chunk);
    try {
      const m = await getStocksSumBySkus({ client_id, api_key, skus: part });
      for (const [k, v] of m.entries()) out.set(k, v);
    } catch (e) {
      console.error('[makeSkuBreakdownText] stocks error:', e?.response?.data || e.message);
    }
  }
  return out;
}

async function getTitlesMapFromDB(db, chatId) {
  if (!db || !chatId) return new Map();
  const sql = `
    SELECT sp.sku::bigint AS sku, COALESCE(sp.title, '') AS title
    FROM shop_products sp
    JOIN shops s ON s.id = sp.shop_id
    WHERE s.chat_id = $1
  `;
  const r = await db.query(sql, [chatId]);
  const map = new Map();
  for (const row of (r.rows || [])) {
    const sku = Number(row.sku);
    if (Number.isFinite(sku)) map.set(sku, row.title || '');
  }
  return map;
}

// HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
function esc(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

// –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é (–¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
function padRight(str, width = 8) {
  const v = String(str);
  const spaces = Math.max(0, width - v.length);
  return ' '.repeat(spaces) + v;
}

// –§–æ—Ä–º–∞—Ç —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
function format2(num) {
  if (num == null || !isFinite(num)) return '-';
  return Number(num).toLocaleString('ru-RU', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
}

// –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function firstWord(s = '') {
  return String(s).trim().split(/\s+/)[0] || '';
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –∑–∞ –¥–∞—Ç—É
 * –°–¢–ò–õ–¨: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ <code>...</code> (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –±–µ–∑ –ø–æ–¥–ª–æ–∂–∫–∏)
 */
async function makeReportText(user, date, opts = {}) {
  const from = `${date}T00:00:00.000Z`;
  const to   = `${date}T23:59:59.999Z`;

  const trackedSkus = opts.trackedSkus || null;
  const hideAds     = !!opts.hideAds;
  const db          = opts.db || null;
  const chatId      = opts.chatId || null;

  // 1) –ó–∞–∫–∞–∑—ã
  const metrics = await getOzonReportFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    metrics: ['revenue', 'ordered_units'],
    trackedSkus,
  });
  const revenueOrdered = Number(metrics?.[0] || 0);
  const orderedUnits   = Number(metrics?.[1] || 0);

  // 2) –í–æ–∑–≤—Ä–∞—Ç—ã
  const returnsCount = await getReturnsCountFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    trackedSkus,
  });
  const returnsSum = await getReturnsSumFiltered({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date,
    trackedSkus,
  });

  // 3) –í—ã–∫—É–ø—ã + —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
  const stats = await getDeliveryBuyoutStats({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date_from: from,
    date_to:   to,
    trackedSkus,
    db,
    chatId,
  });

  // 4) –ü—Ä–∏–±—ã–ª—å
  const { buyoutAmount, profit /*, services_amount*/ } = await getBuyoutAndProfit({
    client_id:  user.client_id,
    api_key:    user.seller_api,
    date_from:  from,
    date_to:    to,
    buyoutCost: stats.buyoutCost,
    buyoutAmount: stats.totalAmount,
  });

  // --- —Ä–µ–∫–ª–∞–º–∞ Performance ---
  let adSpendPerf = null, ctrPerf = null, drrPerf = null;
  if (!hideAds) {
    try {
      let perfId = null, perfSecret = null;
      if (db && chatId) {
        const rr = await db.query(
          `SELECT performance_client_id, performance_secret
             FROM shops
            WHERE chat_id = $1
              AND performance_client_id IS NOT NULL
              AND performance_secret IS NOT NULL
            ORDER BY id
            LIMIT 1`,
          [chatId]
        );
        if (rr.rowCount) {
          perfId = rr.rows[0].performance_client_id;
          perfSecret = rr.rows[0].performance_secret;
        }
      }
      if (perfId && perfSecret && typeof getCampaignDailyStatsTotals === 'function') {
        const { views, clicks, spent } = await getCampaignDailyStatsTotals({
          client_id: perfId,
          client_secret: perfSecret,
          date,
        });
        adSpendPerf = spent;
        ctrPerf = views > 0 ? (clicks / views) * 100 : null;
        drrPerf = revenueOrdered > 0 ? (spent / revenueOrdered) * 100 : null;
      }
    } catch (e) {
      console.error('[makeReportText] Performance API error:', e?.response?.data || e.message);
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
  const lines = [];
  lines.push(`üè™ –ú–∞–≥–∞–∑–∏–Ω:  ${padRight(user.shop_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 0)}`);
  lines.push(' - - - - ');
  lines.push(`üìÜ –û—Ç—á—ë—Ç –∑–∞:  ${padRight(date, 0)}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:  ${padRight(orderedUnits, 2)} —à—Ç.`);
  lines.push(`üí∏ –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(revenueOrdered)}‚ÇΩ`, 2)}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –í—ã–∫—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:  ${padRight(stats.totalCount, 2)} —à—Ç.`);
  lines.push(`üí∏ –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(buyoutAmount)}‚ÇΩ`, 2)}`);
  lines.push(`üí∏ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∫—É–ø–æ–≤:  ${padRight(`${formatMoney(stats.buyoutCost)}‚ÇΩ`, 2)}`);
  lines.push(' - - - - ');
  lines.push(`üì¶ –í–æ–∑–≤—Ä–∞—Ç—ã:  ${padRight(returnsCount, 2)} —à—Ç.`);
  lines.push(`üí∏ –í–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞ —Å—É–º–º—É:  ${padRight(`${formatMoney(returnsSum)}‚ÇΩ`, 2)}`);
  lines.push(' - - - - ');

  if (!hideAds) {
    const adSpendLine = adSpendPerf == null ? '-' : `${formatMoney(adSpendPerf)}‚ÇΩ`;
    const drrLine     = drrPerf == null     ? '-' : `${format2(drrPerf)}%`;
    const ctrLine     = ctrPerf == null     ? '-' : `${format2(ctrPerf)}%`;
    lines.push(`üí∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É:  ${padRight(adSpendLine, 2)}`);
    lines.push(`üí∏ –î.–†.–†:  ${padRight(drrLine, 2)}`);
    lines.push(`üí∏ CTR:  ${padRight(ctrLine, 2)}`);
    lines.push(' - - - - ');
    lines.push(`üí∞ –ü—Ä–∏–±—ã–ª—å:  ${padRight(`${formatMoney(profit)}‚ÇΩ`, 2)}`);
    lines.push(' - - - - ');
  }

  // –í–û–ó–í–†–ê–©–ê–ï–ú –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –ë–ï–ó –ø–æ–¥–ª–æ–∂–∫–∏ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ <code>)
  return lines.map(line => `<code>${esc(line)}</code>`).join('\n');
}

/**
 * –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
 * –°–¢–ò–õ–¨: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ <code>...</code> (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –±–µ–∑ –ø–æ–¥–ª–æ–∂–∫–∏)
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: –ó–∞–∫–∞–∑–∞–Ω–æ, –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É (–∏–∑ /v1/analytics/data, dimension=sku),
 *             –í—ã–∫—É–ø–ª–µ–Ω–æ, –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É (–∏–∑ /v3/finance/transaction/list),
 *             –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ (–∏–∑ /v1/analytics/stocks).
 */
async function makeSkuBreakdownText(user, date, opts = {}) {
  const from = `${date}T00:00:00.000Z`;
  const to   = `${date}T23:59:59.999Z`;

  // 0) –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ SKU ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
  const trackedSkus = Array.isArray(opts.trackedSkus) && opts.trackedSkus.length
    ? [...new Set(opts.trackedSkus.map(Number).filter(Number.isFinite))]
    : null;

  // 0.1) –ö–∞—Ä—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –ë–î, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–µ–Ω–æ–≤–∞—Ç—å SKU –±–µ–∑ –≤—ã–∫—É–ø–æ–≤
  let titleMap = new Map();
  if (opts.db && opts.chatId) {
    try {
      const r = await opts.db.query(
        `
        SELECT sp.sku::bigint AS sku, COALESCE(sp.title, '') AS title
        FROM shop_products sp
        JOIN shops s ON s.id = sp.shop_id
        WHERE s.chat_id = $1
        `,
        [opts.chatId]
      );
      for (const row of (r.rows || [])) {
        const skuNum = Number(row.sku);
        if (Number.isFinite(skuNum)) titleMap.set(skuNum, row.title || '');
      }
    } catch (e) {
      console.error('[makeSkuBreakdownText] title map error:', e?.response?.data || e.message);
    }
  }

  // 1) –í—ã–∫—É–ø—ã –ø–æ SKU (finance list)
  const buyouts = await getSalesBreakdownBySku({
    client_id: user.client_id,
    api_key:   user.seller_api,
    date_from: from,
    date_to:   to,
    trackedSkus, // –µ—Å–ª–∏ null ‚Äî –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–æ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç—Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ tracked –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∏—Ö)
  });
  const buyoutBySku = new Map(); // sku -> { count, amount, name }
  for (const r of buyouts) {
    const sku = Number(r.sku);
    if (!Number.isFinite(sku)) continue;
    buyoutBySku.set(sku, { count: Number(r.count)||0, amount: Number(r.amount)||0, name: r.name || '' });
  }

  // 2) –ó–∞–∫–∞–∑–∞–Ω–æ –ø–æ SKU (analytics, dimension=sku) ‚Äî —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ rate-limit
  let orderedMap = new Map();
  try {
    orderedMap = await getOrderedBySkuMapSafe({
      client_id: user.client_id,
      api_key:   user.seller_api,
      date,
      trackedSkus: null, // –±–µ—Ä—ë–º –ø–æ–ª–Ω—ã–π —Å—Ä–µ–∑, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
    });
  } catch (e) {
    console.error('[makeSkuBreakdownText] ordered map error (after retries):', e?.response?.data || e.message);
  }

  // 3) –ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–±–æ—Ä SKU –¥–ª—è –≤—ã–≤–æ–¥–∞
  let finalSkus;
  if (trackedSkus && trackedSkus.length) {
    finalSkus = trackedSkus;
  } else {
    const set = new Set([
      ...Array.from(buyoutBySku.keys()),
      ...Array.from(orderedMap.keys()),
    ]);
    finalSkus = Array.from(set.values());
  }

  if (!finalSkus.length) {
    return '<code>–î–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –Ω–µ—Ç.</code>';
  }

  // 4) –û—Å—Ç–∞—Ç–∫–∏ ‚Äî –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º (—Å —á–∞–Ω–∫–∞–º–∏ –Ω–∞ –≤—Å—è–∫–∏–π)
  let stockMap = new Map();
  try {
    stockMap = await getStocksSumBySkusChunked({
      client_id: user.client_id,
      api_key:   user.seller_api,
      skus: finalSkus,
    });
  } catch (e) {
    console.error('[makeSkuBreakdownText] stocks error:', e?.response?.data || e.message);
  }

  // 5) –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–≤–µ—Ä—Ö, –∑–∞—Ç–µ–º ¬´–Ω—É–ª–µ–≤—ã–µ¬ª.
  const rows = finalSkus.map((sku) => {
    const ord = orderedMap.get(sku) || { ordered: 0, revenue: 0 };
    const bo  = buyoutBySku.get(sku) || { count: 0, amount: 0, name: '' };
    const stock = Number(stockMap.get(sku) || 0);

    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–º–µ–Ω–∏: shop_products -> –∏–º—è –∏–∑ –≤—ã–∫—É–ø–æ–≤ -> "SKU N"
    const titleFromDb  = titleMap.get(sku) || '';
    const titleFromOps = bo.name || '';
    const displayName  = firstWord(titleFromDb || titleFromOps) || `SKU ${sku}`;

    return {
      sku,
      name: displayName,
      orderedQty: Number(ord.ordered) || 0,
      orderedSum: Number(ord.revenue) || 0,
      buyoutQty:  Number(bo.count) || 0,
      buyoutSum:  Number(bo.amount) || 0,
      stock,
      activeScore: ((Number(bo.amount)||0) > 0 || (Number(ord.revenue)||0) > 0)
        ? (Number(bo.amount)||0) : -1,
    };
  });

  rows.sort((a, b) => {
    if (a.activeScore !== b.activeScore) return b.activeScore - a.activeScore;
    return a.sku - b.sku;
  });

  // 6) –†–µ–Ω–¥–µ—Ä
  const out = [];
  rows.forEach((r) => {
    out.push('<code> - - - - </code>');
    out.push(`<code>üîπ ${esc(r.name)} (${r.sku})</code>`);
    out.push(`<code>üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ: ${r.orderedQty.toLocaleString('ru-RU')} —à—Ç.</code>`);
    out.push(`<code>üí∏ –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—É–º–º—É: ${formatMoney(r.orderedSum)}‚ÇΩ</code>`);
    out.push(`<code>üì¶ –í—ã–∫—É–ø–ª–µ–Ω–æ: ${r.buyoutQty.toLocaleString('ru-RU')} —à—Ç.</code>`);
    out.push(`<code>üí∏ –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å—É–º–º—É: ${formatMoney(r.buyoutSum)}‚ÇΩ</code>`);
    out.push(`<code>üì¶ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${r.stock.toLocaleString('ru-RU')} —à—Ç.</code>`);
  });

  return out.join('\n');
}


// –°–µ—Ä–≤–∏—Å–Ω—ã–µ ¬´—Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞¬ª
async function makeTodayReportText(user, opts = {}) {
  const date = getTodayISO();
  return makeReportText(user, date, { ...(opts || {}), hideAds: true });
}
async function makeYesterdayReportText(user, opts = {}) {
  const date = getYesterdayISO();
  return makeReportText(user, date, { ...(opts || {}), hideAds: false });
}
async function makeYesterdaySkuBreakdownText(user, opts = {}) {
  const date = getYesterdayISO();
  return makeSkuBreakdownText(user, date, opts);
}

module.exports = {
  makeTodayReportText,
  makeYesterdayReportText,
  makeSkuBreakdownText,
  makeYesterdaySkuBreakdownText,
};
