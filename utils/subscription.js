// utils/subscription.js
const { Markup } = require('telegraf');

const esc = (s = '') =>
  String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

function welcomeTextNewUser() {
  const text =
`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –û–∑–æ–Ω –°–µ–ª–ª–µ—Ä –ö—É—Ä—å–µ—Ä! üëã

–ù–∞—à –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ Ozon –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ,
–ø—Ä–∏—Å—ã–ª–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö, –∞ —Ç–∞–∫–∂–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
–ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–≤–æ–¥–Ω—É—é. –ü—Ä–æ–≤–æ–¥–∏—Ç ABC-–∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞.

–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏:

üéûÔ∏è –í–∏–¥–µ–æ https://telegra.ph/123-09-24-73

üì∞ –¢–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è https://telegra.ph/123-09-24-73

–ò–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º. üëá`;
  return `<code>${esc(text)}</code>`;
}

function registrationKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register_begin')],
  ]);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *  - true  ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
 *  - false ‚Äî —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –¥–∞–ª—å—à–µ –∏–¥—Ç–∏ –Ω–µ –Ω–∞–¥–æ
 */
async function ensureRegisteredOrWelcome(ctx, db) {
  const chat_id = ctx.from?.id;
  if (!chat_id) return false;
  const r = await db.query('SELECT 1 FROM users WHERE chat_id = $1 LIMIT 1', [chat_id]);
  if (!r.rowCount) {
    await ctx.reply(welcomeTextNewUser(), {
      parse_mode: 'HTML',
      reply_markup: registrationKeyboard().reply_markup,
    });
    return false;
  }
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.
 * –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É.
 * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
 */
async function assertSubscribedOrReply(ctx, db) {
  const chat_id = ctx.from?.id;
  if (!chat_id) return false;

  const r = await db.query(
    'SELECT is_subscribed FROM users WHERE chat_id = $1 LIMIT 1',
    [chat_id]
  );

  // –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  if (!r.rowCount) {
    await ctx.reply(welcomeTextNewUser(), {
      parse_mode: 'HTML',
      reply_markup: registrationKeyboard().reply_markup,
    });
    return false;
  }

  // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
  if (r.rows[0].is_subscribed !== true) {
    await ctx.reply(
      '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç, —Ç–∞–∫ –∫–∞–∫ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n' +
      '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –í—ã –º–æ–∂–µ—Ç–µ –≤ –º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.'
    );
    return false;
  }

  return true;
}

module.exports = {
  ensureRegisteredOrWelcome,
  assertSubscribedOrReply,
};
